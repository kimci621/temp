import { SectionTag } from '@/components/ui/section-tag';
import Typography from '@/components/ui/typography';
import { cn } from '@/lib/utils/cn';
import { useRef, useState } from 'react';
import Image from 'next/image';
import dynamic from 'next/dynamic';
import { Button } from '@/components/ui/button';
import TypographyAnimated from '@/components/ui/typography-animated';
import { motion, AnimatePresence } from 'framer-motion';
import { ReactSlider, type ReactSliderRef } from '../react-slider';
import { AnimationOpacity } from '../animation/opacity';

const DynamicDemoDialog = dynamic(() => import('../get-demo-dialog').then((c) => c.GetDemoDialog), {});

export function MainFeatures() {
  const carouselItems = [
    {
      label: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –∏ —Å–±–æ—Ä –æ—Ç–∫–ª–∏–∫–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫',
      value: 'job-posting-and-responses',
      maxWidth: 391,
    },
    {
      label: '–•—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏',
      value: 'candidate-history',
      maxWidth: 346,
    },
    {
      label: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥—É–±–ª–µ–π',
      value: 'duplicate-detection',
      maxWidth: 252,
    },
    {
      label: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–æ—á—Ç–æ–π –∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏',
      value: 'email-messenger-integration',
      maxWidth: 239,
    },
    {
      label: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–¥–±–æ—Ä –∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –û–° –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º',
      value: 'client-portal',
      maxWidth: 426,
    },
    {
      label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, KPI –æ—Ç–¥–µ–ª–∞ –ø–æ–¥–±–æ—Ä–∞',
      value: 'recruitment-analytics',
      maxWidth: 405,
    },
    {
      label: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º',
      value: 'customizable-funnels',
      maxWidth: 271,
    },
    {
      label: '–ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã: —ç—Ç–∞–ø—ã, –º–µ—Ç–∫–∏, –¥–æ—Å—Ç—É–ø—ã, —à–∞–±–ª–æ–Ω—ã, –∏—Å—Ç–æ—á–Ω–∏–∫–∏',
      value: 'system-configuration',
      maxWidth: 376,
    },
    {
      label: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏',
      value: 'kanban-board',
      maxWidth: 314,
    },
    {
      label: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –ø—Ä–∏ –∏—Ö –¥–≤–∏–∂–µ–Ω–∏–∏ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ',
      value: 'automated-actions',
      maxWidth: 420,
    },
    {
      label: '–†–∞–±–æ—Ç–∞ –ø–æ 152-–§–ó, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –û–ü–î –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
      value: 'data-protection',
      maxWidth: 509,
    },
  ];

  const [activeTab, setActiveTab] = useState(carouselItems[0].value);
  const tabImages = carouselItems.map((i) => ({
    src: `/images/main-features-carousel-content/${i.value}.png`,
    alt: i.label,
  }));

  const slider = useRef<ReactSliderRef | null>(null);

  const [bgOpacityStyle, setBgOpacityStyle] = useState<'opacity-[70%]' | 'opacity-[100%]'>('opacity-[70%]');

  const handleTabChange = (idx: number) => {
    slider?.current?.goToIndex(idx);
    // setActiveTab(value);
  };

  return (
    <div className={'flex flex-col items-center'}>
      <SectionTag
        emoji={'ü§ñ'}
        name={'–®–∏—Ä–æ–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π'}
        className={'mb-6'}
      />

      <TypographyAnimated
        variant={'h1-medium'}
        animationAmount={0.2}
        animationDuration={0.75}
        className={'mb-20 text-center text-(--fill-white)'}
      >
        –í–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª <br />
        –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ
      </TypographyAnimated>

      <ul className={'mb-10'}>
        {carouselItems.map((c, idx) => (
          // biome-ignore lint/a11y/useKeyWithClickEvents: <explanation>
          <li
            key={idx.toString()}
            className="inline-block mx-1 cursor-pointer"
            onClick={() => {
              handleTabChange(idx);
            }}
          >
            <div
              className={cn(
                'w-2 h-2 rounded-full transition-all duration-300',
                activeTab === c.value ? 'bg-(--active-dark)' : 'bg-(--fill-dark-fill)',
              )}
            />
          </li>
        ))}
      </ul>

      <ReactSlider
        ref={slider}
        config={{
          infinite: true,
          onSlideChange: (currentSlide) => {
            setActiveTab(carouselItems[currentSlide].value);
          },
        }}
      >
        {carouselItems.map((c, idx) => (
          <div
            // biome-ignore lint/suspicious/noArrayIndexKey: <explanation>
            key={idx}
            className="flex w-[80vw] md:w-[30vw] xl:w-[25vw] shrink-0 items-center justify-center px-2"
          >
            {/* biome-ignore lint/a11y/useKeyWithClickEvents: <explanation> */}
            <div
              onClick={() => handleTabChange(idx)}
              className={cn(
                activeTab !== c.value ? 'bg-(--fill-dark-fill)' : 'bg-(--active-dark)',
                'text-center px-6 py-2 rounded-lg cursor-pointer w-full',
              )}
            >
              <Typography
                variant={'button'}
                className={'break-words text-(--fill-white)'}
              >
                {c.label}
              </Typography>
            </div>
          </div>
        ))}
      </ReactSlider>

      <div className={'w-full container-inner mt-10 xl:mt-12'}>
        <AnimatePresence mode="wait">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            className={cn(
              'rounded-2xl border border-(--border-dark) bg-(--fill-dark-fill) p-1 relative overflow-hidden',
            )}
          >
            {tabImages.map(
              (i, idx) =>
                `/images/main-features-carousel-content/${activeTab}.png` === i.src && (
                  <AnimationOpacity
                    key={i.src}
                    duration={1}
                  >
                    <Image
                      src={i.src}
                      alt={i.alt}
                      width={1680}
                      height={960}
                      priority={true}
                      quality={100}
                      className={cn('w-full h-full object-contain rounded-xl')}
                    />
                  </AnimationOpacity>
                ),
            )}

            {/* Blurred background image with lower z-index */}
            <div className="absolute bottom-0 left-0 w-[140%] md:w-full z-1">
              <Image
                src={'/images/mountains-without-bg.png'}
                alt="bg filtered image"
                width={1168}
                height={246}
                loading="lazy"
                quality={10}
                className={cn('w-full h-auto blur-[100px] transition-all ease-out duration-300', bgOpacityStyle)}
              />
            </div>

            {/* Background mountain image */}
            <div className="absolute bottom-0 left-0 w-[140%] md:w-full z-2">
              <Image
                src={'/images/mountains-without-bg.png'}
                alt="bg image"
                width={1168}
                height={246}
                loading="lazy"
                quality={100}
                className={cn('w-full h-auto transition-all ease-out duration-300', bgOpacityStyle)}
              />
            </div>

            <div className={'w-full flex flex-col items-center pb-[40px] md:pb-[80px] xl:pb-[140px] relative z-10'}>
              <SectionTag
                emoji={'ü§ñ'}
                name={'–®–∏—Ä–æ–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π'}
                className={'mx-auto mt-10 md:mt-14 xl:mt-20'}
              />

              <TypographyAnimated
                variant={'h3-medium'}
                animationAmount={0.2}
                animationDuration={0.75}
                className={'mt-6 text-center text-(--fill-white)'}
              >
                Huntlee ‚Äì —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç,
                <br />–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö
                <br />
                –±–∏–∑–Ω–µ—Å-—Ü–µ–ª–µ–π
              </TypographyAnimated>

              <TypographyAnimated
                variant={'text'}
                animationAmount={0.2}
                animationDuration={0.75}
                className={'mt-6 text-center text-(--fill-white)'}
              >
                –î–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
              </TypographyAnimated>

              <DynamicDemoDialog
                className={'mt-10 xl:mt-20'}
                triggerButton={
                  <div
                    onMouseEnter={(e) => {
                      setBgOpacityStyle('opacity-[100%]');
                    }}
                    onMouseLeave={(e) => {
                      setBgOpacityStyle('opacity-[70%]');
                    }}
                  >
                    <Button
                      variant={'secondary'}
                      className={'w-fit'}
                      asChild
                    >
                      <Typography
                        variant={'button'}
                        className={'text-(--text-light)'}
                      >
                        <span className={'hidden md:inline'}>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º</span>
                        <span className={'inline md:hidden'}>–í–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</span>
                      </Typography>
                    </Button>
                  </div>
                }
              />
            </div>
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
}
